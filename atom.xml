<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZACKON</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-06T06:24:38.538Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bluecube13</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何搭建个人博客</title>
    <link href="http://yoursite.com/2018/05/04/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/04/如何搭建个人博客/</id>
    <published>2018-05-04T07:41:30.000Z</published>
    <updated>2018-05-06T06:24:38.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这篇文章将介绍如何使用Hexo框架搭配Github Pages构建个人静态博客，并解答了一些本人构建过程中遇到的困难，希望有所帮助</p></blockquote><p>#前言</p><p>如今常用的构建个人博客的方式有如下几种：</p><ul><li><p>使用CSDN，简书等网站提供的博客服务</p></li><li><p>搭建个人服务器，并使用WordPress，Hexo等框架实现博客服务</p></li><li>使用Hexo + Github Pages构建个人博客</li></ul><p>相比于使用CSDN等网站提供的服务，使用第三种方式构建博客的可定制性更高，并且相比于使用个人服务器，利用Github Pages简化了服务器的配置过程，并且可以免费使用，故而本人选用Hexo + Github Pages的方式来进行博客搭建的工作</p><blockquote><p>本人进行的所有工作都在macOS进行（macOS High Sierra 10.13.4）</p></blockquote><a id="more"></a><p>##摘要</p><ul><li><a href="#1">配置Github Pages</a></li><li><a href="#2">安装Hexo</a></li><li><a href="#3">使用博客</a></li></ul><h4 id="1">配置Github Pages</h4><p>Github Pages分为个人主页和项目主页，每一个Github账户只能拥有一个个人主页，个人主页即博客</p><p>构建个人主页十分简单，请参照<a href="https://pages.github.com" target="_blank" rel="noopener">Github Pages官方帮助</a>进行搭建，成功后你应当完成了以下步骤：</p><ul><li>安装并学会使用Git（推荐按照<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">Git使用教程</a>进行学习）</li><li>注册Github账号并创建个人Github Pages repository</li><li>将本机绑定到Github账号</li><li>使用Git命令clone相应repo并push自己的修改</li></ul><p>在浏览器中你应该可以进行访问主页<code>https://yourusername.github.io</code>，并会显示Hello World</p><h4 id="2">安装Hexo</h4><ul><li>安装Homebrew</li></ul><p>Homebrew是一款很好用的包管理软件，推荐每一位macOS的程序员使用者安装</p><p>在Terminal中输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><ul><li>安装Node.js</li></ul><p>在Terminal中输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><p>安装成功后可以通过以下代码进行验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v <span class="comment">#验证nodejs版本</span></span><br><span class="line">npm -v <span class="comment">#验证npm版本</span></span><br></pre></td></tr></table></figure><p>如果成功，则Node.js安装成功</p><ul><li>安装Hexo</li></ul><p>Hexo的安装也十分的简单，详细的文档参照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p><p>在Terminal中输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog <span class="comment">#blog为所建的文件夹名称，可自由更改</span></span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br><span class="line">hexo server -p 8001</span><br></pre></td></tr></table></figure><p>一切顺利的话，在Terminal中应该能看到以下内容：</p><p><img src="https://i.loli.net/2018/05/05/5aed7c8a0d485.png" alt="屏幕快照 2018-05-05 下午5.41.59.png"></p><p>之后访问链接就能看见自己的主页了</p><div class="tip"><br><br>以上是正常的安装过程，但本人安装时遇到了很多的问题<br><br></div><p>在按照正常的步骤试用Homebrew成功安装了Node.js和Hexo后，输入hexo提示command not found，进行搜索后发现是因为没有指定Node.js的版本导致的，因此，为了成功的解决，我开始了以下的安装步骤：</p><ul><li>卸载已安装的Node.js</li></ul><p>在Terminal中输入以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew remove --force node</span><br><span class="line">sudo rm -r /usr/<span class="built_in">local</span>/lib/node_modules</span><br><span class="line"></span><br><span class="line">brew prune</span><br><span class="line">sudo rm -r /usr/<span class="built_in">local</span>/include/node</span><br></pre></td></tr></table></figure><ul><li>安装nvm</li></ul><p>nvm是Node.js的版本管理工具，在Terminal中输入以下代码：</p><div class="tip"><br><br>安装nvm不建议使用<code>brew install nvm</code>直接安装，因为由于brew安装nvm的bug问题，导致安装后缺少文件，无法直接在命令行使用<code>nvm</code>命令<br><br></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure><p>安装完毕后在终端输入<code>nvm ls</code>命令查看已安装Node.js版本，若还是提示command not found，则输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch .bash_profile <span class="comment">#创建bash_profile文件</span></span><br><span class="line">open -e .bash_profile <span class="comment">#打开bash_profile文件</span></span><br></pre></td></tr></table></figure><p>在该文件中输入以下语句，并保存退出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br></pre></td></tr></table></figure><p>之后重启Terminal即可安装成功，此时，输入nvm会显示如下，则安装成功：</p><p><img src="https://i.loli.net/2018/05/06/5aee9b558cf6f.png" alt="屏幕快照 2018-05-06 下午2.05.45.png"></p><ul><li>安装Node.js</li></ul><p>使用<code>nvm ls-remote</code>指令来查看现在可以安装的Node.js版本，但我又遇到了问题，输入以上语句后，等待片刻，返回N/A，这显然是不对的，进行查询后，获得如下解决办法，在Terminal中输入以下语句：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -e .bash_profile <span class="comment">#打开bash_profile文件</span></span><br></pre></td></tr></table></figure><p>打开文件后，复制如下内容，并保存退出，重启终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_NODEJS_ORG_MIRROR=<span class="string">"https://nodejs.org/dist"</span></span><br></pre></td></tr></table></figure><p>之后输入<code>nvm ls-romote</code>指令便能够正常的查看可安装的Node.js版本</p><p>安装Node.js时，在Terminal中输入以下指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvm install x.xx.x <span class="comment">#x.xx.x为想要安装的版本，比如我安装的就是8.11.1</span></span><br><span class="line"><span class="comment">#安装成功后输入</span></span><br><span class="line">nvm ls <span class="comment">#查看已安装的版本</span></span><br><span class="line">nvm use x.xx.x <span class="comment">#使用x.xx.x版本的Node.js</span></span><br><span class="line">nvm <span class="built_in">alias</span> default x.xx.x <span class="comment">#指定x.xx.x版本为默认版本</span></span><br></pre></td></tr></table></figure><p>这样，就成功的安装并指定了Node.js版本</p><p>之后再按照正常的步骤安装Hexo即可</p><h4 id="3">使用博客</h4>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章将介绍如何使用Hexo框架搭配Github Pages构建个人静态博客，并解答了一些本人构建过程中遇到的困难，希望有所帮助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#前言&lt;/p&gt;
&lt;p&gt;如今常用的构建个人博客的方式有如下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用CSDN，简书等网站提供的博客服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;搭建个人服务器，并使用WordPress，Hexo等框架实现博客服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;使用Hexo + Github Pages构建个人博客&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相比于使用CSDN等网站提供的服务，使用第三种方式构建博客的可定制性更高，并且相比于使用个人服务器，利用Github Pages简化了服务器的配置过程，并且可以免费使用，故而本人选用Hexo + Github Pages的方式来进行博客搭建的工作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人进行的所有工作都在macOS进行（macOS High Sierra 10.13.4）&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
